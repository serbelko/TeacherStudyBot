

from typing import List, Dict, Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy import inspect
from sqlalchemy.orm import Session

from config.db_session import engine, SessionLocal
from src.models import User
from src.repo.db import CeleryRepository, WishListRepository, UserRepository, WishListItemRepository  # —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
from src.handlers.strings import ALL_TEXT, ALL_BUTTON

# DEBUG: –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å
db = SessionLocal()

wishlist_db = WishListRepository(db)
wishlistitem_db = WishListItemRepository(db)
celery_db = CeleryRepository(db)
inspector = inspect(engine)
print("‚Üí TABLES IN DB:", inspector.get_table_names())

router = Router()
PAGE_SIZE = 5  # —Å–∫–æ–ª—å–∫–æ –≤–∏—à–ª–∏—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

class ListCreation(StatesGroup):
    name = State()
    list_type = State()

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from typing import Optional, List, Dict

PAGE_SIZE = 5  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@router.callback_query(F.data == "my_list_callback")
async def show_my_lists(callback: CallbackQuery, state: FSMContext):
    await state.update_data(page=1)
    await _render_page(callback.message, callback.from_user.id, state)
    await callback.answer()

@router.callback_query(F.data == "next_page")
async def on_next_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("page", 1)
    await state.update_data(page=current_page + 1)
    await _render_page(callback.message, callback.from_user.id, state)
    await callback.answer()

@router.callback_query(F.data == "prev_page")
async def on_prev_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get("page", 1)
    await state.update_data(page=max(1, current_page - 1))
    await _render_page(callback.message, callback.from_user.id, state)
    await callback.answer()

async def _render_page(message: Message, tg_user_id: int, state: FSMContext):
    data = await state.get_data()
    page = data.get("page", 1)
    
    db: Session = SessionLocal()
    try:
        user_db = UserRepository(db)
        user: Optional[User] = db.query(User).filter(User.user_id == str(tg_user_id)).first()
        if not user:
            new_user = str(message.from_user.id)
            name_user = str(message.from_user.full_name)
            user_db.add_user(new_user, name_user)
            user: Optional[User] = db.query(User).filter(User.user_id == str(tg_user_id)).first()

        repo = WishListRepository(db)
        total = repo.count_wishlists_by_user(user.user_id)
        max_page = max(1, (total + PAGE_SIZE - 1) // PAGE_SIZE)
        page = max(1, min(page, max_page))
        offset = (page - 1) * PAGE_SIZE

        slice_ = repo.list_wishlists_by_user_page(user.user_id, PAGE_SIZE, offset)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text = "–í–∞—à–∏ —Å–ø–∏—Å–∫–∏:" if slice_ else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤."
        if slice_:
            text = "–í–æ—Ç —Ç–≤–æ–∏ —Å–ø–∏—Å–∫–∏"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        inline_keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–æ–≤
        for wl in slice_:
            inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üìã {wl['name']} ({wl['list_type']})",
                    callback_data=f"wl_{wl['id']}"
                )
            ])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        pagination_row = []
        pagination_count = []
        if page > 1:
            pagination_row.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="prev_page")
            )
        
        pagination_count.append(
            InlineKeyboardButton(
                text=f"{page}/{max_page}",
                callback_data="page_info"
            )
        )
        
        if page < max_page:
            pagination_row.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data="next_page")
            )
        
        if pagination_count:
            inline_keyboard.append(pagination_count)
        if pagination_row:
            inline_keyboard.append(pagination_row)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        inline_keyboard.append([
            InlineKeyboardButton(
                text=ALL_BUTTON["create_list"], 
                callback_data="create_list_callback"
            ),
            InlineKeyboardButton(
                text=ALL_BUTTON["check_users"], 
                callback_data="check_users_callback"
            )
        ])

        markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await message.edit_text(text, reply_markup=markup)
        except:
            await message.answer(text, reply_markup=markup)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–æ–≤")
    finally:
        db.close()

class FSMwishlist(StatesGroup):
    my_wl = State()


@router.callback_query(F.data.startswith("wl_"))
async def open_my_wl(callback: CallbackQuery, state: FSMContext):
    wl_id = str(callback.data).replace("wl_", "", 1)
    await state.set_state(FSMwishlist.my_wl)
    await state.update_data(my_wl=wl_id)
    wish_list = wishlist_db.get_wishlist_by_id(wl_id)
    texts = f"–í–æ—Ç –≤–∏—à-–ª–∏—Å—Ç\n–ò–º—è: {wish_list['name']}\n"
    items = wishlistitem_db.list_items_by_wishlist(wl_id)
    celery_markup = []
    for i in items:
        celerys = celery_db.get_celery_by_id(str(i["celery_id"]))
        celery_name = celerys["label"]
        celery_id= celerys["celery_id"]
        celery_markup.append([InlineKeyboardButton(text=f"{celery_name}", callback_data=f"check_in_my_{celery_id}")])
    
    markup = [[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_menu")],
              [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data=f"get_celery_for_id_{wish_list["id"]}")]]
 
    
    celery_markup += markup
    await callback.message.answer(text=texts, 
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=celery_markup))




@router.callback_query(F.data.startswith('check_in_my_'))
async def checking_my_goods(callback: CallbackQuery, state: FSMContext):
    celery_id = str(callback.data).replace("check_in_my_", "", 1)
    data = celery_db.get_celery_by_id(celery_id=celery_id)
    new_data_wow = await state.get_data()
    wl_id = new_data_wow["my_wl"]
    if data:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"del_sel{celery_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"wl_{wl_id}")]
        ])
        await callback.message.answer_photo(
            photo=data['photo'],  # file_id –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            caption=f"–í–∞—à —Ç–æ–≤–∞—Ä —Ç–æ–≤–∞—Ä:\n\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['label']}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['about']}\n"
                    f"–¶–µ–Ω–∞: {data['cost']}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}",
            reply_markup=markup
        )


@router.callback_query(F.data.startswith('del_sel'))
async def del_my_good_from_lenta(callback: CallbackQuery, state: FSMContext):
    celery_id = str(callback.data).replace("del_sel", "", 1)
    data = await state.get_data()
    wl_id = data["my_wl"]
    status = wishlistitem_db.get_status_by_celery_id(celery_id)
    if status != "active":
        await callback.answer(
        text="–ù–µ —Å–æ–≤–µ—Ç—É–µ–º –µ–≥–æ —É–¥–∞–ª—è—Ç—å (–Ω–∞–º–µ–∫)",
        show_alert=True  # False –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    )

    else:
        wishlistitem_db.remove_item(celery_id)
        wish_list = wishlist_db.get_wishlist_by_id(wl_id)
        texts = f"–í–æ—Ç –≤–∏—à-–ª–∏—Å—Ç\n–ò–º—è: {wish_list['name']}\n\n"
        items = wishlistitem_db.list_items_by_wishlist(wl_id)
        celery_markup = []
        for i in items:
            celerys = celery_db.get_celery_by_id(str(i["celery_id"]))
            celery_name = celerys["label"]
            celery_id= celerys["celery_id"]
            celery_markup.append([InlineKeyboardButton(text=f"{celery_name}", callback_data=f"check_in_my_{celery_id}")])
        
        markup = [[InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="back_menu")],
                [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data=f"get_celery_for_id_{wish_list["id"]}")]]
    
        
        celery_markup += markup
        await callback.message.answer(text=texts, 
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=celery_markup))
        await state.clear()

    